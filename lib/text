import 'dart:async';
import 'package:flutter/material.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;
import 'package:speech_to_text/speech_recognition_result.dart';
import 'package:speech_to_text/speech_recognition_error.dart';
import 'package:logger/logger.dart';
import 'package:flutterdemo0/WebSocketService.dart';
import 'package:flutter/foundation.dart';
import 'package:permission_handler/permission_handler.dart';

class SpeechToTextScreen extends StatefulWidget {
  final WebSocketService webSocketService;

  const SpeechToTextScreen({super.key, required this.webSocketService});

  @override
  State<SpeechToTextScreen> createState() => _SpeechToTextScreenState();
}

class _SpeechToTextScreenState extends State<SpeechToTextScreen>
    with SingleTickerProviderStateMixin {
  final Logger logger = Logger();
  final stt.SpeechToText _speech = stt.SpeechToText();
  bool _isListening = false;
  String _text = 'Press the button and start speaking...';
  String _recognizedText = '';
  double _confidence = 0.0;
  String connectionStatus = "Connecting to WebSocket...";
  String micPermissionStatus = "Checking microphone permission...";
  String _speechStatus = "Initializing speech recognition...";
  late AnimationController _animationController;
  bool _speechInitialized = false;

  // Red theme gradient colors
  final List<Color> gradientColors = [
    Color(0xFFEF5350), // Light Red
    Color(0xFFE53935), // Red
    Color(0xFFC62828), // Dark Red
  ];

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 500),
    );

    widget.webSocketService.sendMessage("SpeechToText");

    widget.webSocketService.messageStream.listen(
      (message) {
        logger.i("Received message: $message");
      },
      onError: (error) {
        setState(() {
          connectionStatus = "Connection error: $error";
        });
      },
      onDone: () {
        setState(() {
          connectionStatus = "Connection closed";
        });
      },
    );

    setState(() {
      connectionStatus = "Connected successfully!";
    });

    // Request microphone permission and initialize speech
    _checkPermission();
  }

  Future<void> _checkPermission() async {
    try {
      // Check microphone permission status
      PermissionStatus status = await Permission.microphone.status;

      setState(() {
        micPermissionStatus = "Permission status: ${status.toString()}";
      });

      if (!status.isGranted) {
        // Request permission if not granted
        status = await Permission.microphone.request();

        setState(() {
          micPermissionStatus =
              "Permission after request: ${status.toString()}";
        });
      }

      if (status.isGranted) {
        // Initialize speech recognition when permission is granted
        _initSpeech();
      } else {
        setState(() {
          micPermissionStatus = "Microphone permission denied";
          _speechStatus =
              "Cannot initialize speech recognition without microphone permission";
        });
      }
    } catch (e) {
      setState(() {
        micPermissionStatus = "Error checking permission: $e";
      });
      logger.e("Permission error: $e");
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    widget.webSocketService.sendMessage("Close");
    super.dispose();
  }

  Future<void> _initSpeech() async {
    try {
      bool available = await _speech.initialize(
        onStatus: _onSpeechStatus,
        onError: _onSpeechError,
        debugLogging: true,
      );

      setState(() {
        _speechInitialized = available;
        _speechStatus =
            available
                ? "Speech recognition initialized successfully"
                : "Speech recognition failed to initialize";
      });

      // Log available languages to debug
      if (available) {
        var locales = await _speech.locales();
        logger.i(
          "Available locales: ${locales.map((e) => e.localeId).join(', ')}",
        );

        // Log if device supports the expected locale
        bool hasEnUS = locales.any((locale) => locale.localeId == 'en_US');
        logger.i("Has en_US locale: $hasEnUS");
      }

      logger.i("Speech initialization result: $available");
    } catch (e) {
      setState(() {
        _speechInitialized = false;
        _speechStatus = "Error initializing speech: $e";
      });
      logger.e("Speech init error: $e");
    }
  }

  void _onSpeechStatus(String status) {
    logger.i("Speech status: $status");
    setState(() {
      _speechStatus = "Status: $status";
      _isListening = status == 'listening';
    });
  }

  void _onSpeechError(SpeechRecognitionError error) {
    logger.e("Speech error: ${error.errorMsg} (code: ${error.permanent})");
    setState(() {
      _isListening = false;
      _speechStatus = "Error: ${error.errorMsg}";
    });
  }

  Future<void> _startListening() async {
    if (!_speechInitialized) {
      // Try to initialize speech again if it failed
      await _initSpeech();
      if (!_speechInitialized) {
        setState(() {
          _text = "Speech recognition not available on this device";
        });
        return;
      }
    }

    setState(() {
      _recognizedText = '';
      _confidence = 0.0;
      _text = 'Starting to listen...';
    });

    try {
      // List available speech locales for debugging
      final locales = await _speech.locales();
      final defaultLocale = await _speech.systemLocale();
      logger.i("System locale: ${defaultLocale?.localeId ?? 'unknown'}");
      logger.i(
        "Available locales: ${locales.map((e) => e.localeId).join(', ')}",
      );

      String localeId = 'en_US';
      if (!locales.any((locale) => locale.localeId == 'en_US')) {
        // Use system locale if available, otherwise use the first available locale
        localeId =
            defaultLocale?.localeId ??
            (locales.isNotEmpty ? locales.first.localeId : 'en_US');
        logger.i("Falling back to locale: $localeId");
      }

      // Then use it in your listen call
      bool started = await _speech.listen(
        onResult: _onSpeechResult,
        localeId: localeId,
        listenOptions: stt.SpeechListenOptions(),
      );

      logger.i("Listen started: $started");

      setState(() {
        _isListening = started;
        _text = started ? 'Listening...' : 'Failed to start listening';
        _speechStatus = started ? "Listening..." : "Failed to start";
      });

      if (started) {
        _animationController.repeat(reverse: true);
      }
    } catch (e) {
      logger.e("Error starting speech recognition: $e");
      setState(() {
        _isListening = false;
        _text = 'Error: $e';
        _speechStatus = "Error starting: $e";
      });
    }
  }

  void _stopListening() async {
    try {
      await _speech.stop();
      logger.i("Speech recognition stopped");
      _animationController.stop();
      setState(() {
        _isListening = false;
        _text =
            _recognizedText.isEmpty ? 'Tap to speak again' : _recognizedText;
        _speechStatus = "Stopped";
      });
    } catch (e) {
      logger.e("Error stopping speech recognition: $e");
      setState(() {
        _speechStatus = "Error stopping: $e";
      });
    }
  }

  void _onSpeechResult(SpeechRecognitionResult result) {
    logger.i(
      "Speech result: ${result.recognizedWords} (final: ${result.finalResult})",
    );
    setState(() {
      _recognizedText = result.recognizedWords;
      if (result.finalResult) {
        _text =
            result.recognizedWords.isEmpty
                ? 'Tap to speak again'
                : result.recognizedWords;
        if (result.hasConfidenceRating && result.confidence > 0) {
          _confidence = result.confidence;
          logger.i("Confidence: ${result.confidence}");
        }
        _sendRecognizedText();
      }
    });
  }

  void _sendRecognizedText() {
    if (_recognizedText.isNotEmpty) {
      widget.webSocketService.sendMessage(_recognizedText);
      logger.i("Sent recognized text: $_recognizedText");
    }
  }

  void _resetSpeech() async {
    if (_isListening) {
      await _speech.stop();
    }

    setState(() {
      _speechInitialized = false;
      _isListening = false;
      _text = 'Reinitializing speech recognition...';
    });

    await _initSpeech();
  }

  void _goBack() {
    widget.webSocketService.sendMessage("Close");
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        title: const Text(
          "Speech to Text",
          style: TextStyle(
            fontWeight: FontWeight.bold,
            letterSpacing: 1.2,
            color: Colors.white,
          ),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: Container(
          margin: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.2),
            borderRadius: BorderRadius.circular(12),
          ),
          child: IconButton(
            icon: const Icon(Icons.arrow_back, color: Colors.white),
            onPressed: _goBack,
          ),
        ),
        actions: [
          // Debug reset button
          Container(
            margin: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(12),
            ),
            child: IconButton(
              icon: const Icon(Icons.refresh, color: Colors.white),
              onPressed: _resetSpeech,
              tooltip: "Reset speech recognition",
            ),
          ),
        ],
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: gradientColors,
          ),
        ),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                // Connection Status Card
                Container(
                  margin: const EdgeInsets.only(bottom: 16),
                  padding: const EdgeInsets.symmetric(
                    vertical: 12,
                    horizontal: 16,
                  ),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.7),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: Colors.yellow.withOpacity(0.5),
                      width: 1.5,
                    ),
                  ),
                  width: double.infinity,
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Icon(Icons.wifi, color: Colors.yellow, size: 20),
                          SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              connectionStatus,
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 14,
                                fontWeight: FontWeight.w500,
                              ),
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                        ],
                      ),
                      Divider(color: Colors.white24, height: 16),
                      Row(
                        children: [
                          Icon(Icons.mic, color: Colors.yellow, size: 20),
                          SizedBox(width: 12),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  micPermissionStatus,
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 14,
                                    fontWeight: FontWeight.w500,
                                  ),
                                  overflow: TextOverflow.ellipsis,
                                ),
                                SizedBox(height: 4),
                                Text(
                                  _speechStatus,
                                  style: TextStyle(
                                    color: Colors.white70,
                                    fontSize: 12,
                                  ),
                                  overflow: TextOverflow.ellipsis,
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),

                // Recognized Text Card
                Expanded(
                  child: Container(
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black26,
                          blurRadius: 10,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    width: double.infinity,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              "Recognized Text",
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                                color: Colors.red.shade800,
                              ),
                            ),
                            AnimatedBuilder(
                              animation: _animationController,
                              builder: (context, child) {
                                return Row(
                                  children: [
                                    Opacity(
                                      opacity:
                                          _isListening
                                              ? _animationController.value
                                              : 0.0,
                                      child: Icon(
                                        Icons.mic,
                                        color: Colors.red,
                                        size: 24,
                                      ),
                                    ),
                                    if (_isListening) ...[
                                      SizedBox(width: 8),
                                      Text(
                                        "Listening",
                                        style: TextStyle(
                                          color: Colors.red.shade700,
                                          fontWeight: FontWeight.w500,
                                        ),
                                      ),
                                    ],
                                  ],
                                );
                              },
                            ),
                          ],
                        ),
                        const SizedBox(height: 12),
                        Divider(color: Colors.red.shade100, thickness: 1),
                        const SizedBox(height: 8),
                        Expanded(
                          child: SingleChildScrollView(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  _recognizedText.isEmpty
                                      ? _text
                                      : _recognizedText,
                                  style: TextStyle(
                                    fontSize: 18,
                                    color:
                                        _recognizedText.isEmpty
                                            ? Colors.grey.shade600
                                            : Colors.black87,
                                    height: 1.5,
                                  ),
                                ),
                                if (_confidence > 0) ...[
                                  const SizedBox(height: 16),
                                  Container(
                                    padding: EdgeInsets.symmetric(
                                      horizontal: 10,
                                      vertical: 6,
                                    ),
                                    decoration: BoxDecoration(
                                      color: Colors.red.shade50,
                                      borderRadius: BorderRadius.circular(12),
                                      border: Border.all(
                                        color: Colors.red.shade200,
                                        width: 1,
                                      ),
                                    ),
                                    child: Text(
                                      "Confidence: ${(_confidence * 100).toStringAsFixed(1)}%",
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: Colors.red.shade700,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                  ),
                                ],
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),

                const SizedBox(height: 24),

                // Microphone Button
                Material(
                  elevation: 8,
                  color: Colors.transparent,
                  borderRadius: BorderRadius.circular(40),
                  child: InkWell(
                    onTap: _isListening ? _stopListening : _startListening,
                    borderRadius: BorderRadius.circular(40),
                    child: Container(
                      width: 80,
                      height: 80,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: Colors.white,
                      ),
                      child: Center(
                        child: Container(
                          width: 60,
                          height: 60,
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            gradient: LinearGradient(
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                              colors:
                                  _isListening
                                      ? [
                                        Colors.red.shade700,
                                        Colors.red.shade900,
                                      ]
                                      : [
                                        Colors.red.shade400,
                                        Colors.red.shade600,
                                      ],
                            ),
                          ),
                          child: Icon(
                            _isListening ? Icons.stop : Icons.mic,
                            color: Colors.white,
                            size: 28,
                          ),
                        ),
                      ),
                    ),
                  ),
                ),

                const SizedBox(height: 12),

                // Status Text
                Text(
                  _isListening ? "Tap to stop" : "Tap to speak",
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                    letterSpacing: 0.5,
                    shadows: [
                      Shadow(
                        color: Colors.black54,
                        offset: Offset(1, 1),
                        blurRadius: 2,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
